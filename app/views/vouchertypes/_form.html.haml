- existing_bundle = @vouchertype.bundle? && !@vouchertype.new_record?

%p
  %label{:for => :vouchertype_category} Type
  - if @vouchertype.new_record?
    - @vouchertype.category ||= 'revenue'
    = select 'vouchertype', 'category', options_for_select(categories_with_printable_names(), @vouchertype.category.to_sym)
    = popup_help_for :vouchertype_type
  - else
    %span.strong= human_name_for_category(@vouchertype.category)
    = hidden_field_tag 'vouchertype_category_uncooked', @vouchertype.category

%p
  %label{:for=>:vouchertype_name} Name
  = text_field 'vouchertype', 'name'

%p#p_vouchertype_price.vtform
  %label{:for=>:vouchertype_price} Price
  = text_field 'vouchertype', 'price', :size => 6

%p#p_vouchertype_account_code.vtform
  %label{:for=>:vouchertype_account_code_id} Account Code
  = collection_select 'vouchertype', 'account_code_id', AccountCode.all, :id, :name_with_code
  = link_to "Add/Edit Account Codes", account_codes_path, :class => 'btn btn-primary'
  = popup_help_for :vouchertype_account_code

%p#p_vouchertype_offer_public.vtform
  %label{:for=>:vouchertype_offer_public} Availability
  = select "vouchertype", "offer_public", Vouchertype.offer_to
  = popup_help_for :vouchertype_availability

%p#p_vouchertype_season.vtform
  %label{:for=>:vouchertype_season} Season
  - if existing_bundle
    = select "vouchertype", "season", options_for_seasons_range(-5,2,@vouchertype.season || Time.this_season), {}, {:onchange => "$('input.bundle_component').map(Element.clear); $('#included_vouchers').hide(); "}
  - else
    = select "vouchertype", "season", options_for_seasons_range(-5,2,@vouchertype.season || Time.this_season)
  = popup_help_for :vouchertype_season
  - if existing_bundle
    %p.feedback If you change the season of a bundle, first save the change, then edit the bundle again to add vouchers for the new season.

%p#p_vouchertype_display_order.vtform
  %label{:for => :vouchertype_display_order} Display order
  = text_field 'vouchertype', 'display_order', :size => 3, :max => 3
  = popup_help_for :vouchertype_display_order

%p#p_vouchertype_fulfillment_needed.clear.vtform
  %label{:for=>:vouchertype_fulfillment_needed} Mail fulfillment needed
  = check_box 'vouchertype', 'fulfillment_needed'
  = popup_help_for :vouchertype_fulfillment_needed

%p#p_vouchertype_walkup_sale_allowed.vtform
  %label{:for=>:vouchertype_walkup_sale_allowed} Walkup sales allowed
  = check_box 'vouchertype', 'walkup_sale_allowed', :disabled => (@vouchertype.bundle? || @vouchertype.subscriber_voucher?)
  = popup_help_for :vouchertype_walkup_sale_allowed

%p#p_vouchertype_changeable.vtform
  %label{:for=>:vouchertype_changeable} Customer can self-change/self-cancel
  = check_box 'vouchertype', 'changeable', :disabled => @vouchertype.bundle?
  = popup_help_for :vouchertype_changeable

%p#p_vouchertype_subscription.vtform
  %label{:for=>:vouchertype_subscription} Qualifies buyer as a Subscriber
  = check_box 'vouchertype', 'subscription'
  = popup_help_for :vouchertype_subscription

%p#p_vouchertype_comments.vtform
  %label{:for=>:vouchertype_comments} Comments/description
  = text_area 'vouchertype', 'comments', 'cols' => 40, 'rows' => 3

- if existing_bundle
  #for_bundles
    = fields_for @valid_voucher do |vv|
      %p
        %label{:for => :valid_voucher_max_sales_for_type} Max sales (Leave blank for unlimited)
        = vv.text_field :max_sales_for_type
      %p
        = vv.label :start_sales
        = vv.datetime_select 'start_sales'
      %p
        = vv.label :end_sales
        = vv.datetime_select 'end_sales'
      %p
        = vv.label :promo_code
        = vv.text_field 'promo_code', :size => 40

    %fieldset#included_vouchers
      %legend Included vouchers:
      - Vouchertype.zero_cost_vouchertypes(@vouchertype.season).reject { |v| v.bundle? }.each do |v|
        - input_name = "vouchertype[included_vouchers][#{v.id}]"
        - input_id = "vouchertype_included_vouchers[#{v.id}]"
        %label{:for => input_id}= v.name
        = text_field_tag input_name, @vouchertype.included_vouchers[v.id.to_s], :size => 4, :id => input_id, :class => 'bundle_component'
        %br

- else
  %p.strong Note: You  must first define a voucher to be a  bundle, then go back and edit to add the appropriate tickets to the bundle.

